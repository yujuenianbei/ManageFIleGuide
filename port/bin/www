#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('antd-port:server');
var fs = require('fs');
var http = require('http');
var https = require('https');
// 添加此段内容以引入socketio
var io = require('../socket');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Create HTTPS server.
 */

var privateKey  = fs.readFileSync('config/licence/hp.php9.cc.key');
var certificate = fs.readFileSync('config/licence/hp.php9.cc.crt');
var credentials = {key: privateKey, cert: certificate};


app.set('port', '3001')

var serverHttps = https.createServer(credentials, app);

// 添加此段内容启动 Socket.io
io.getSocketio(server);

// /**
//  * Listen on provided port, on all network interfaces.
//  */
//  //websocket跟express绑定
//  var io = require('socket.io')(server);
//  io.on('connection', function(socket) {
//      //收到客户端的websocket连接请求
//    console.log('connection:' + socket.request.connection.remoteAddress);  
//    socket.on('scan', function(data) {
//      //......
//    })
//  });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


serverHttps.listen('3001');
serverHttps.on('error', onError);
serverHttps.on('listening', onListeningHttps);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


function onListeningHttps() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}