'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.removeWrongFields = removeWrongFields;
exports.toInputObjectType = toInputObjectType;
exports.convertInputObjectField = convertInputObjectField;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _graphql = require('../graphql');

var _generic = require('../type/generic');

var _generic2 = _interopRequireDefault(_generic);

var _misc = require('./misc');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*  strict */
/* eslint-disable no-use-before-define, prefer-template */

function removeWrongFields(fields) {
  const result = {};
  Object.keys(fields).forEach(key => {
    const field = fields[key];
    if (!(0, _graphql.isAbstractType)(field.type)) {
      result[key] = field;
    }
  });
  return result;
}

function toInputObjectType(typeComposer, opts = {}, cache = new Map()) {
  if (typeComposer.hasInputTypeComposer()) {
    return typeComposer.getInputTypeComposer();
  }

  const schemaComposer = typeComposer.constructor.schemaComposer;
  const prefix = opts.prefix || '';
  const postfix = opts.postfix || 'Input';

  const inputTypeName = `${prefix}${typeComposer.getTypeName()}${postfix}`;
  const type = typeComposer.getType();
  if (cache.has(type)) {
    const itc = cache.get(type);
    return itc;
  }

  const inputTypeComposer = new schemaComposer.InputTypeComposer(new _graphql.GraphQLInputObjectType({
    name: inputTypeName,
    fields: {}
  }));
  cache.set(typeComposer.getType(), inputTypeComposer);

  const outputFields = removeWrongFields(typeComposer.getFields());
  const inputFields = {};
  Object.keys(outputFields).forEach(key => {
    const fieldOpts = (0, _extends3.default)({}, opts, {
      fieldName: key,
      outputTypeName: typeComposer.getTypeName()
    });
    inputFields[key] = convertInputObjectField(outputFields[key], fieldOpts, cache, schemaComposer);
  });
  inputTypeComposer.addFields(inputFields);

  return inputTypeComposer;
}

function convertInputObjectField(field, opts, cache, schemaComposer) {
  let fieldType = field.type;

  const wrappers = [];
  while (fieldType instanceof _graphql.GraphQLList || fieldType instanceof _graphql.GraphQLNonNull) {
    wrappers.unshift(fieldType.constructor);
    fieldType = fieldType.ofType;
  }

  if (!(0, _graphql.isInputType)(fieldType)) {
    if (fieldType instanceof _graphql.GraphQLObjectType) {
      const typeOpts = {
        prefix: `${opts.prefix || ''}${(0, _misc.upperFirst)(opts.outputTypeName || '')}`,
        postfix: opts.postfix || 'Input'
      };
      const tc = new schemaComposer.TypeComposer(fieldType);
      fieldType = toInputObjectType(tc, typeOpts, cache).getType();
    } else {
      // eslint-disable-next-line
      console.error(`GQC: can not convert field '${opts.outputTypeName || ''}.${opts.fieldName || ''}' to InputType` + '\nIt should be GraphQLObjectType, but got \n' + _util2.default.inspect(fieldType, { depth: 2, colors: true }));
      fieldType = _generic2.default;
    }
  }

  const inputFieldType = wrappers.reduce((type, Wrapper) => new Wrapper(type), fieldType);

  return { type: inputFieldType, description: field.description };
}