'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveMaybeThunk = resolveMaybeThunk;
exports.camelCase = camelCase;
exports.getPluralName = getPluralName;
exports.upperFirst = upperFirst;
exports.clearName = clearName;
exports.omit = omit;
exports.only = only;

var _pluralize = require('./pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolveMaybeThunk(thingOrThunk) {
  // eslint-disable-line
  return typeof thingOrThunk === 'function' ? thingOrThunk() : thingOrThunk;
} /*  strict */

function camelCase(str) {
  return str.replace(/(?:^\w|[A-Z]|\b\w)/g, (letter, index) => index === 0 ? letter.toLowerCase() : letter.toUpperCase()).replace(/\s+/g, '');
}

function getPluralName(name) {
  return (0, _pluralize2.default)(camelCase(name));
}

function upperFirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function clearName(str) {
  return str.replace(/[^_a-zA-Z0-9]/g, '');
}

function omit(obj, keys) {
  if (!obj) {
    return {};
  }

  const result = Object.assign({}, obj);
  if (Array.isArray(keys)) {
    keys.forEach(k => {
      delete result[k];
    });
  } else {
    delete result[keys];
  }

  return result;
}

function only(obj, keys) {
  if (!obj) {
    return {};
  }

  const result = {};
  if (Array.isArray(keys)) {
    keys.forEach(k => {
      if ({}.hasOwnProperty.call(obj, k)) {
        result[k] = obj[k];
      }
    });
  } else if ({}.hasOwnProperty.call(obj, keys)) {
    result[keys] = obj[keys];
  }

  return result;
}