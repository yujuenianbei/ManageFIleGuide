'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeByPath = typeByPath;
exports.typeByPathTC = typeByPathTC;
exports.typeByPathITC = typeByPathITC;
exports.processType = processType;

var _graphql = require('../graphql');

var _TypeComposer = require('../TypeComposer');

var _InputTypeComposer = require('../InputTypeComposer');

var _Resolver = require('../Resolver');

/**
 * fieldName
 * @argName
 * #resolver
 */
/*  strict */
/* eslint-disable no-use-before-define */

function typeByPath(src, path) {
  const parts = Array.isArray(path) ? path : String(path).split('.');

  if (parts.length === 0) {
    return src;
  }

  if (src instanceof _TypeComposer.TypeComposer) {
    return typeByPathTC(src, parts);
  } else if (src instanceof _InputTypeComposer.InputTypeComposer) {
    return typeByPathITC(src, parts);
  } else if (src instanceof _Resolver.Resolver) {
    return typeByPathRSV(src, parts);
  }

  return src;
}

function typeByPathTC(tc, parts) {
  if (!tc) return undefined;
  if (parts.length === 0) return tc;

  const name = parts[0];
  if (!name) return undefined;
  const nextName = parts[1];

  if (name.startsWith('$')) {
    const restParts = parts.slice(1);
    const resolver = tc.getResolver(name.substring(1));
    if (resolver) {
      if (restParts.length > 0) {
        return typeByPathRSV(resolver, restParts);
      }
      return resolver;
    }
    return undefined;
  }

  if (nextName && nextName.startsWith('@')) {
    const arg = tc.getFieldArg(name, nextName.substring(1));
    return processType(arg && arg.type, parts.slice(2), tc.constructor.schemaComposer);
  }

  const fieldType = tc.getFieldType(name);
  return processType(fieldType, parts.slice(1), tc.constructor.schemaComposer);
}

function typeByPathITC(itc, parts) {
  if (!itc) return undefined;
  if (parts.length === 0) return itc;

  const fieldType = itc.getFieldType(parts[0]);
  return processType(fieldType, parts.slice(1), itc.constructor.schemaComposer);
}

function typeByPathRSV(rsv, parts) {
  if (!rsv) return undefined;
  if (parts.length === 0) return rsv;
  const name = parts[0];
  if (!name) return undefined;

  if (name.startsWith('@')) {
    const arg = rsv.getArg(name.substring(1));
    if (!arg) return undefined;
    return processType(arg.type, parts.slice(1), rsv.constructor.schemaComposer);
  }

  return processType(rsv.getType(), parts, rsv.constructor.schemaComposer);
}

function processType(type, restParts, schema) {
  if (!type) return undefined;
  const unwrappedType = (0, _graphql.getNamedType)(type);

  if (unwrappedType instanceof _graphql.GraphQLObjectType) {
    const tc = new schema.TypeComposer(unwrappedType);
    if (restParts.length > 0) {
      return typeByPathTC(tc, restParts);
    }
    return tc;
  } else if (unwrappedType instanceof _graphql.GraphQLInputObjectType) {
    const itc = new schema.InputTypeComposer(unwrappedType);
    if (restParts.length > 0) {
      return typeByPathITC(itc, restParts);
    }
    return itc;
  }

  if (restParts.length > 0) {
    return undefined;
  }
  return unwrappedType;
}