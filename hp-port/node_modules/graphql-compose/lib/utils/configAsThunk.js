'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveOutputConfigsAsThunk = resolveOutputConfigsAsThunk;
exports.resolveInputConfigsAsThunk = resolveInputConfigsAsThunk;
exports.keepConfigsAsThunk = keepConfigsAsThunk;

var _is = require('./is');

function resolveOutputConfigsAsThunk(schema, fieldMap, typeName = '') {
  if ((0, _is.isObject)(fieldMap)) {
    Object.keys(fieldMap).forEach(name => {
      if ((0, _is.isFunction)(fieldMap[name])) {
        const fieldConfig = schema.typeMapper.convertOutputFieldConfig(fieldMap[name](), name, typeName);
        fieldConfig._fieldAsThunk = fieldMap[name];
        fieldMap[name] = fieldConfig;
      }

      if ((0, _is.isFunction)(fieldMap[name].type)) {
        fieldMap[name]._typeAsThunk = fieldMap[name].type;
        const fieldConfig = schema.typeMapper.convertOutputFieldConfig(fieldMap[name].type(), name, typeName);
        fieldMap[name].type = fieldConfig.type;
      }

      if ((0, _is.isObject)(fieldMap[name].args)) {
        fieldMap[name].args = resolveInputConfigsAsThunk(schema, fieldMap[name].args, `${typeName}.${name}.args`);
      }
    });
  }
  return fieldMap;
} /*  strict */
/* eslint-disable no-param-reassign, no-use-before-define */

function resolveInputConfigsAsThunk(schema, fieldMap, typeName) {
  if ((0, _is.isObject)(fieldMap)) {
    Object.keys(fieldMap).forEach(name => {
      if ((0, _is.isFunction)(fieldMap[name])) {
        const fieldConfig = schema.typeMapper.convertInputFieldConfig(fieldMap[name](), name, typeName);
        fieldConfig._fieldAsThunk = fieldMap[name];
        fieldMap[name] = fieldConfig;
      }

      if ((0, _is.isFunction)(fieldMap[name].type)) {
        fieldMap[name]._typeAsThunk = fieldMap[name].type;
        const fieldConfig = schema.typeMapper.convertInputFieldConfig(fieldMap[name].type(), name, typeName);
        fieldMap[name].type = fieldConfig.type;
      }
    });
  }
  return fieldMap;
}

function keepConfigsAsThunk(fieldMap) {
  if ((0, _is.isObject)(fieldMap)) {
    Object.keys(fieldMap).forEach(key => {
      if (fieldMap[key]._fieldAsThunk) {
        fieldMap[key] = fieldMap[key]._fieldAsThunk;
      } else {
        if (fieldMap[key]._typeAsThunk) {
          fieldMap[key].type = fieldMap[key]._typeAsThunk;
        }
        if (fieldMap[key].args) {
          fieldMap[key].args = keepConfigsAsThunk(fieldMap[key].args);
        }
      }
    });
  }
  return fieldMap;
}