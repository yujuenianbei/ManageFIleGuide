'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resolver = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _graphql = require('./graphql');

var _deepmerge = require('./utils/deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _configAsThunk = require('./utils/configAsThunk');

var _misc = require('./utils/misc');

var _is = require('./utils/is');

var _filterByDotPaths = require('./utils/filterByDotPaths');

var _filterByDotPaths2 = _interopRequireDefault(_filterByDotPaths);

var _projection = require('./utils/projection');

var _typeByPath = require('./utils/typeByPath');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { deprecate } from './utils/debug';

/*  strict */
/* eslint-disable no-use-before-define, no-restricted-syntax */

class Resolver {

  constructor(opts) {
    if (!this.constructor.schemaComposer) {
      throw new Error('Class<Resolver> can only be created by a SchemaComposer.');
    }

    if (!opts.name) {
      throw new Error('For Resolver constructor the `opts.name` is required option.');
    }
    this.name = opts.name;
    this.displayName = opts.displayName || null;
    this.parent = opts.parent || null;
    this.kind = opts.kind || null;
    this.description = opts.description || '';

    if (opts.type) {
      this.setType(opts.type);
    }

    if (opts.args) {
      this.args = this.constructor.schemaComposer.typeMapper.convertArgConfigMap(opts.args, this.name, 'Resolver');
    } else {
      this.args = {};
    }

    if (opts.resolve) {
      this.resolve = opts.resolve;
    }

    // Alive proper Flow type casting in autosuggestions for class with Generics
    // it's required due using <TSource, TContext>
    // and Class<> utility type in SchemaComposer
    /* :: return this; */
  }

  hasArg(argName) {
    return !!this.args[argName];
  }

  /**
   * Should return GraphQLArgumentConfig
   * See TODO in TypeComposer.getFields()
   * `any` solved problem of "Could not decide which case to select"
   */
  getArg(argName) {
    if (!this.hasArg(argName)) {
      throw new Error(`Cannot get arg '${argName}' for resolver ${this.name}. Argument does not exist.`);
    }

    return this.args[argName];
  }

  getArgType(argName) {
    const arg = this.getArg(argName);
    return arg.type;
  }

  getArgTC(argName) {
    const argType = (0, _graphql.getNamedType)(this.getArgType(argName));
    if (!(argType instanceof _graphql.GraphQLInputObjectType)) {
      throw new Error(`Cannot get InputTypeComposer for arg '${argName}' in resolver ${this.getNestedName()}. ` + `This argument should be InputObjectType, but it has type '${argType.constructor.name}'`);
    }
    return new this.constructor.schemaComposer.InputTypeComposer(argType);
  }

  getArgs() {
    return this.args;
  }

  getArgNames() {
    return Object.keys(this.args);
  }

  setArgs(args) {
    this.args = this.constructor.schemaComposer.typeMapper.convertArgConfigMap(args, this.name, 'Resolver');
    return this;
  }

  setArg(argName, argConfig) {
    this.args[argName] = this.constructor.schemaComposer.typeMapper.convertArgConfig(argConfig, argName, this.name, 'Resolver');
    return this;
  }

  addArgs(newArgs) {
    this.setArgs((0, _extends3.default)({}, this.getArgs(), newArgs));
    return this;
  }

  removeArg(argNameOrArray) {
    const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
    argNames.forEach(argName => {
      delete this.args[argName];
    });
    return this;
  }

  removeOtherArgs(argNameOrArray) {
    const keepArgNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
    Object.keys(this.args).forEach(argName => {
      if (keepArgNames.indexOf(argName) === -1) {
        delete this.args[argName];
      }
    });
    return this;
  }

  reorderArgs(names) {
    const orderedArgs = {};
    names.forEach(name => {
      if (this.args[name]) {
        orderedArgs[name] = this.args[name];
        delete this.args[name];
      }
    });
    this.args = (0, _extends3.default)({}, orderedArgs, this.args);
    return this;
  }

  cloneArg(argName, newTypeName) {
    if (!{}.hasOwnProperty.call(this.args, argName)) {
      throw new Error(`Can not clone arg ${argName} for resolver ${this.name}. Argument does not exist.`);
    }

    let originalType = this.args[argName].type;
    let isUnwrapped = false;
    if (originalType instanceof _graphql.GraphQLNonNull) {
      originalType = originalType.ofType;
      isUnwrapped = true;
    }

    if (!(originalType instanceof _graphql.GraphQLInputObjectType)) {
      throw new Error(`Can not clone arg ${argName} for resolver ${this.name}.` + 'Argument should be GraphQLInputObjectType (complex input type).');
    }
    if (!newTypeName || newTypeName !== (0, _misc.clearName)(newTypeName)) {
      throw new Error('You should provide new type name as second argument');
    }
    if (newTypeName === originalType.name) {
      throw new Error('You should provide new type name. It is equal to current name.');
    }

    let clonedType = this.constructor.schemaComposer.InputTypeComposer.create(originalType).clone(newTypeName).getType();
    if (isUnwrapped) {
      clonedType = new _graphql.GraphQLNonNull(clonedType);
    }

    this.args[argName] = (0, _extends3.default)({}, this.args[argName], {
      type: clonedType
    });
    return this;
  }

  isRequired(argName) {
    return this.getArgType(argName) instanceof _graphql.GraphQLNonNull;
  }

  makeRequired(argNameOrArray) {
    const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
    argNames.forEach(argName => {
      if (this.args[argName]) {
        const argType = this.args[argName].type;
        if (!(0, _graphql.isInputType)(argType)) {
          throw new Error(`Cannot make argument ${argName} required. It should be InputType: ${JSON.stringify(argType)}`);
        }
        if (!(argType instanceof _graphql.GraphQLNonNull)) {
          this.args[argName].type = new _graphql.GraphQLNonNull(argType);
        }
      }
    });
    return this;
  }

  makeOptional(argNameOrArray) {
    const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
    argNames.forEach(argName => {
      if (argNames.indexOf(argName) > -1) {
        const argType = this.args[argName].type;
        if (argType instanceof _graphql.GraphQLNonNull) {
          this.args[argName].type = argType.ofType;
        }
      }
    });
    return this;
  }

  /*
  * This method should be overriden via constructor
  */
  /* eslint-disable */
  resolve(resolveParams) {
    return Promise.resolve();
  }
  /* eslint-enable */

  getResolve() {
    return this.resolve;
  }

  setResolve(resolve) {
    this.resolve = resolve;
    return this;
  }

  getType() {
    return this.type;
  }

  getTypeComposer() {
    const outputType = (0, _graphql.getNamedType)(this.type);
    if (!(outputType instanceof _graphql.GraphQLObjectType)) {
      throw new Error(`Resolver ${this.name} cannot return its output type as TypeComposer instance. ` + `Cause '${this.type.toString()}' does not instance of GraphQLObjectType.`);
    }
    return new this.constructor.schemaComposer.TypeComposer(outputType);
  }

  setType(gqType) {
    const fc = this.constructor.schemaComposer.typeMapper.convertOutputFieldConfig(gqType, 'setType', 'Resolver');

    if (!fc || !(0, _graphql.isOutputType)(fc.type)) {
      throw new Error('You should provide correct OutputType for Resolver.type.');
    }
    this.type = fc.type;
    return this;
  }

  getFieldConfig(opts = {}) {
    const resolve = this.getResolve();
    return {
      type: this.getType(),
      args: (0, _configAsThunk.resolveInputConfigsAsThunk)(this.constructor.schemaComposer, this.getArgs(), undefined),
      description: this.description,
      resolve: function (_resolve) {
        function resolve(_x, _x2, _x3, _x4) {
          return _resolve.apply(this, arguments);
        }

        resolve.toString = function () {
          return _resolve.toString();
        };

        return resolve;
      }((source, args, context, info) => {
        let projection = (0, _projection.getProjectionFromAST)(info);
        if (opts.projection) {
          projection = (0, _deepmerge2.default)(projection, opts.projection);
        }
        return resolve({ source, args, context, info, projection });
      })
    };
  }

  getKind() {
    return this.kind;
  }

  setKind(kind) {
    if (kind !== 'query' && kind !== 'mutation' && kind !== 'subscription') {
      throw new Error(`You provide incorrect value '${kind}' for Resolver.setKind method. ` + 'Valid values are: query | mutation | subscription');
    }
    this.kind = kind;
    return this;
  }

  getDescription() {
    return this.description;
  }

  setDescription(description) {
    this.description = description;
    return this;
  }

  get(path) {
    return (0, _typeByPath.typeByPath)(this, path);
  }

  clone(opts = {}) {
    const oldOpts = {};

    const self = this;
    for (const key in self) {
      if (self.hasOwnProperty(key)) {
        // $FlowFixMe
        oldOpts[key] = self[key];
      }
    }
    oldOpts.displayName = undefined;
    oldOpts.args = (0, _extends3.default)({}, this.args);
    return new this.constructor.schemaComposer.Resolver((0, _extends3.default)({}, oldOpts, opts));
  }

  wrap(cb, newResolverOpts = {}) {
    const prevResolver = this;
    const newResolver = this.clone((0, _extends3.default)({
      name: 'wrap',
      parent: prevResolver
    }, newResolverOpts));

    if ((0, _is.isFunction)(cb)) {
      const resolver = cb(newResolver, prevResolver);
      if (resolver) return resolver;
    }

    return newResolver;
  }

  wrapResolve(cb, wrapperName = 'wrapResolve') {
    return this.wrap((newResolver, prevResolver) => {
      const newResolve = cb(prevResolver.getResolve());
      newResolver.setResolve(newResolve);
      return newResolver;
    }, { name: wrapperName });
  }

  wrapArgs(cb, wrapperName = 'wrapArgs') {
    return this.wrap((newResolver, prevResolver) => {
      // clone prevArgs, to avoid changing args in callback
      const prevArgs = (0, _extends3.default)({}, prevResolver.getArgs());
      const newArgs = cb(prevArgs);
      newResolver.setArgs(newArgs);
      return newResolver;
    }, { name: wrapperName });
  }

  wrapCloneArg(argName, newTypeName) {
    return this.wrap(newResolver => newResolver.cloneArg(argName, newTypeName), {
      name: 'cloneFilterArg'
    });
  }

  wrapType(cb, wrapperName = 'wrapType') {
    return this.wrap((newResolver, prevResolver) => {
      const prevType = prevResolver.getType();
      const newType = cb(prevType);
      newResolver.setType(newType);
      return newResolver;
    }, { name: wrapperName });
  }

  addFilterArg(opts) {
    if (!opts.name) {
      throw new Error('For Resolver.addFilterArg the arg name `opts.name` is required.');
    }

    if (!opts.type) {
      throw new Error('For Resolver.addFilterArg the arg type `opts.type` is required.');
    }

    const resolver = this.wrap(null, { name: 'addFilterArg' });

    // get filterTC or create new one argument
    const filter = resolver.hasArg('filter') ? resolver.getArg('filter') : undefined;
    let filterITC;
    if (filter && filter.type instanceof _graphql.GraphQLInputObjectType) {
      filterITC = new this.constructor.schemaComposer.InputTypeComposer(filter.type);
    } else {
      if (!opts.filterTypeNameFallback || !(0, _is.isString)(opts.filterTypeNameFallback)) {
        throw new Error('For Resolver.addFilterArg needs to provide `opts.filterTypeNameFallback: string`. ' + 'This string will be used as unique name for `filter` type of input argument. ' + 'Eg. FilterXXXXXInput');
      }
      filterITC = this.constructor.schemaComposer.InputTypeComposer.create(opts.filterTypeNameFallback);
    }

    let defaultValue;
    if (filter && filter.defaultValue) {
      defaultValue = filter.defaultValue;
    }
    if (opts.defaultValue) {
      if (!defaultValue) {
        defaultValue = {};
      }
      defaultValue[opts.name] = opts.defaultValue;
    }

    resolver.setArg('filter', {
      type: filterITC.getType(),
      description: filter && filter.description || undefined,
      defaultValue
    });

    filterITC.setField(opts.name, (0, _extends3.default)({}, (0, _misc.only)(opts, ['name', 'type', 'defaultValue', 'description'])));

    const resolveNext = resolver.getResolve();
    const query = opts.query;
    if (query && (0, _is.isFunction)(query)) {
      resolver.setResolve(resolveParams => {
        const value = _objectPath2.default.get(resolveParams, ['args', 'filter', opts.name]);
        if (value !== null && value !== undefined) {
          if (!resolveParams.rawQuery) {
            resolveParams.rawQuery = {}; // eslint-disable-line
          }
          query(resolveParams.rawQuery, value, resolveParams);
        }
        return resolveNext(resolveParams);
      });
    }

    return resolver;
  }

  addSortArg(opts) {
    if (!opts.name) {
      throw new Error('For Resolver.addSortArg the `opts.name` is required.');
    }

    if (!opts.value) {
      throw new Error('For Resolver.addSortArg the `opts.value` is required.');
    }

    const resolver = this.wrap(null, { name: 'addSortArg' });

    // get sortETC or create new one
    let sortETC;
    if (resolver.hasArg('sort')) {
      const sort = resolver.getArg('sort');
      if (sort.type instanceof _graphql.GraphQLEnumType) {
        sortETC = this.constructor.schemaComposer.EnumTypeComposer.create(sort.type);
      } else {
        throw new Error('Resolver should have `sort` arg with type GraphQLEnumType. ' + `But got: ${_util2.default.inspect(sort.type, { depth: 2 })} `);
      }
    } else {
      if (!opts.sortTypeNameFallback || !(0, _is.isString)(opts.sortTypeNameFallback)) {
        throw new Error('For Resolver.addSortArg needs to provide `opts.sortTypeNameFallback: string`. ' + 'This string will be used as unique name for `sort` type of input argument. ' + 'Eg. SortXXXXXEnum');
      }
      sortETC = this.constructor.schemaComposer.EnumTypeComposer.create({
        name: opts.sortTypeNameFallback,
        values: {
          [opts.name]: {}
        }
      });
      resolver.setArg('sort', sortETC);
    }

    // extend sortETC with new sorting value
    sortETC.setField(opts.name, {
      name: opts.name,
      description: opts.description,
      deprecationReason: opts.deprecationReason,
      value: (0, _is.isFunction)(opts.value) ? opts.name : opts.value
    });

    // If sort value is evaluable (function), then wrap resolve method
    const resolveNext = resolver.getResolve();
    if ((0, _is.isFunction)(opts.value)) {
      const getValue = opts.value;
      resolver.setResolve(resolveParams => {
        const value = _objectPath2.default.get(resolveParams, ['args', 'sort']);
        if (value === opts.name) {
          const newSortValue = getValue(resolveParams);
          resolveParams.args.sort = newSortValue; // eslint-disable-line
        }
        return resolveNext(resolveParams);
      });
    }

    return resolver;
  }

  getNestedName() {
    const name = this.displayName || this.name;
    if (this.parent) {
      return `${name}(${this.parent.getNestedName()})`;
    }
    return name;
  }

  toStringOld() {
    function extendedInfo(resolver, spaces = '') {
      return ['Resolver(', `  name: ${resolver.name},`, `  displayName: ${resolver.displayName || ''},`, `  type: ${_util2.default.inspect(resolver.type, { depth: 2 })},`, `  args: ${_util2.default.inspect(resolver.args, { depth: 3 }).replace('\n', `\n  ${spaces}`)},`, `  resolve: ${resolver.resolve ? resolver.resolve.toString().replace('\n', `\n  ${spaces}`) : 'undefined'},`, `  parent: ${resolver.parent ? extendedInfo(resolver.parent, `  ${spaces}`) : ''}`, ')'].filter(s => !!s).join(`\n  ${spaces}`);
    }
    return extendedInfo(this);
  }

  toString(colors = true) {
    return _util2.default.inspect(this.toDebugStructure(false), { depth: 20, colors }).replace(/\\n/g, '\n');
  }

  setDisplayName(name) {
    this.displayName = name;
    return this;
  }

  toDebugStructure(colors = true) {
    const info = {
      name: this.name,
      displayName: this.displayName,
      type: _util2.default.inspect(this.type, { depth: 2, colors }),
      args: this.args,
      resolve: this.resolve ? this.resolve.toString() : this.resolve
    };
    if (this.parent) {
      info.resolve = [info.resolve, { 'Parent resolver': this.parent.toDebugStructure(colors) }];
    }
    return info;
  }

  debugExecTime() {
    var _this = this;

    /* eslint-disable no-console */
    return this.wrapResolve(next => (() => {
      var _ref = (0, _asyncToGenerator3.default)(function* (rp) {
        const name = `Execution time for ${_this.getNestedName()}`;
        console.time(name);
        const res = yield next(rp);
        console.timeEnd(name);
        return res;
      });

      return function (_x5) {
        return _ref.apply(this, arguments);
      };
    })(), 'debugExecTime');
    /* eslint-enable no-console */
  }

  debugParams(filterPaths, opts = { colors: true, depth: 5 }) {
    /* eslint-disable no-console */
    return this.wrapResolve(next => rp => {
      console.log(`ResolveParams for ${this.getNestedName()}:`);
      const data = (0, _filterByDotPaths2.default)(rp, filterPaths, {
        // is hidden (use debugParams(["info"])) or debug({ params: ["info"]})
        // `is hidden (use debugParams(["context.*"])) or debug({ params: ["context.*"]})`,
        hideFields: rp && rp.context && rp.context.res && rp.context.params && rp.context.headers ? {
          // looks like context is express request, colapse it
          info: '[[hidden]]',
          context: '[[hidden]]'
        } : {
          info: '[[hidden]]',
          'context.*': '[[hidden]]'
        },
        hideFieldsNote: 'Some data was [[hidden]] to display this fields use debugParams("%fieldNames%")'
      });
      console.dir(data, opts);
      return next(rp);
    }, 'debugParams');
    /* eslint-enable no-console */
  }

  debugPayload(filterPaths, opts = { colors: true, depth: 5 }) {
    var _this2 = this;

    /* eslint-disable no-console */
    return this.wrapResolve(next => (() => {
      var _ref2 = (0, _asyncToGenerator3.default)(function* (rp) {
        try {
          const res = yield next(rp);
          console.log(`Resolved Payload for ${_this2.getNestedName()}:`);
          if (Array.isArray(res) && res.length > 3 && !filterPaths) {
            console.dir([filterPaths ? (0, _filterByDotPaths2.default)(res[0], filterPaths) : res[0], `[debug note]: Other ${res.length - 1} records was [[hidden]]. ` + 'Use debugPayload("0 1 2 3 4") or debug({ payload: "0 1 2 3 4" }) for display this records'], opts);
          } else {
            console.dir(filterPaths ? (0, _filterByDotPaths2.default)(res, filterPaths) : res, opts);
          }
          return res;
        } catch (e) {
          console.log(`Rejected Payload for ${_this2.getNestedName()}:`);
          console.log(e);
          throw e;
        }
      });

      return function (_x6) {
        return _ref2.apply(this, arguments);
      };
    })(), 'debugPayload');
    /* eslint-enable no-console */
  }

  debug(filterDotPaths, opts = { colors: true, depth: 2 }) {
    return this.debugExecTime().debugParams(filterDotPaths ? filterDotPaths.params : null, opts).debugPayload(filterDotPaths ? filterDotPaths.payload : null, opts);
  }
}
exports.Resolver = Resolver;