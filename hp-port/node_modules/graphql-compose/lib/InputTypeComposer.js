'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputTypeComposer = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _graphql = require('./graphql');

var _misc = require('./utils/misc');

var _is = require('./utils/is');

var _configAsThunk = require('./utils/configAsThunk');

var _typeByPath = require('./utils/typeByPath');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class InputTypeComposer {

  static create(opts) {
    if (!this.schemaComposer) {
      throw new Error('Class<InputTypeComposer> must be created by a SchemaComposer.');
    }

    let ITC;

    if ((0, _is.isString)(opts)) {
      const typeName = opts;
      const NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
      if (NAME_RX.test(typeName)) {
        ITC = new this.schemaComposer.InputTypeComposer(new _graphql.GraphQLInputObjectType({
          name: typeName,
          fields: () => ({})
        }));
      } else {
        const type = this.schemaComposer.typeMapper.createType(typeName);
        if (!(type instanceof _graphql.GraphQLInputObjectType)) {
          throw new Error('You should provide correct GraphQLInputObjectType type definition.' + 'Eg. `input MyInputType { name: String! }`');
        }
        ITC = new this.schemaComposer.InputTypeComposer(type);
      }
    } else if (opts instanceof _graphql.GraphQLInputObjectType) {
      ITC = new this.schemaComposer.InputTypeComposer(opts);
    } else if ((0, _is.isObject)(opts)) {
      const type = new _graphql.GraphQLInputObjectType({
        name: opts.name,
        description: opts.description,
        fields: () => ({})
      });
      ITC = new this.schemaComposer.InputTypeComposer(type);

      if ((0, _is.isObject)(opts.fields)) {
        ITC.addFields(opts.fields);
      }
    } else {
      throw new Error('You should provide InputObjectConfig or string with type name to InputTypeComposer.create(opts)');
    }

    return ITC;
  }

  constructor(gqType) {
    if (!this.constructor.schemaComposer) {
      throw new Error('Class<InputTypeComposer> can only be created by a SchemaComposer.');
    }

    if (!(gqType instanceof _graphql.GraphQLInputObjectType)) {
      throw new Error('InputTypeComposer accept only GraphQLInputObjectType in constructor');
    }
    this.gqType = gqType;
  }

  /**
   * Get fields from a GraphQL type
   * WARNING: this method read an internal GraphQL instance variable.
   * TODO: should return GraphQLInputFieldConfigMap
   * BUT if setFields(fields: ComposeInputFieldConfigMap | GraphQLInputFieldConfigMap)
   * then flow producess error with such common case ITC.setFields(ITC.getFields())
   * with following message "Could not decide which case to select"
   * More info about solution
   *  https://twitter.com/nodkz/status/925010361815851008
   *  https://github.com/facebook/flow/issues/2892
   */
  getFields() {
    const fields = this.gqType._typeConfig.fields;

    const fieldMap = (0, _configAsThunk.keepConfigsAsThunk)((0, _misc.resolveMaybeThunk)(fields));

    if ((0, _is.isObject)(fieldMap)) {
      return (0, _extends3.default)({}, fieldMap);
    }
    return {};
  }

  getFieldNames() {
    return Object.keys(this.getFields());
  }

  hasField(fieldName) {
    const fields = this.getFields();
    return !!fields[fieldName];
  }

  /**
   * Completely replace all fields in GraphQL type
   * WARNING: this method rewrite an internal GraphQL instance variable.
   */
  setFields(fields) {
    const prepearedFields = this.constructor.schemaComposer.typeMapper.convertInputFieldConfigMap(fields, this.getTypeName());

    this.gqType._typeConfig.fields = () => (0, _configAsThunk.resolveInputConfigsAsThunk)(this.constructor.schemaComposer, prepearedFields, this.getTypeName());
    delete this.gqType._fields; // if schema was builded, delete defineFieldMap
    return this;
  }

  setField(fieldName, fieldConfig) {
    this.addFields({ [fieldName]: fieldConfig });
    return this;
  }

  /**
   * Add new fields or replace existed in a GraphQL type
   */
  addFields(newFields) {
    this.setFields((0, _extends3.default)({}, this.getFields(), newFields));
    return this;
  }

  /**
   * Get fieldConfig by name
   * TODO should be GraphQLInputFieldConfig
   * see getFields() method for details
   */
  getField(fieldName) {
    const fields = this.getFields();

    if (!fields[fieldName]) {
      throw new Error(`Cannot get field '${fieldName}' from input type '${this.getTypeName()}'. Field does not exist.`);
    }

    return fields[fieldName];
  }

  removeField(fieldNameOrArray) {
    const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
    const fields = this.getFields();
    fieldNames.forEach(fieldName => delete fields[fieldName]);
    this.setFields(fields);
    return this;
  }

  removeOtherFields(fieldNameOrArray) {
    const keepFieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
    const fields = this.getFields();
    Object.keys(fields).forEach(fieldName => {
      if (keepFieldNames.indexOf(fieldName) === -1) {
        delete fields[fieldName];
      }
    });
    this.setFields(fields);
    return this;
  }

  extendField(fieldName, parialFieldConfig) {
    let prevFieldConfig;
    try {
      prevFieldConfig = this.getField(fieldName);
    } catch (e) {
      throw new Error(`Cannot extend field '${fieldName}' from input type '${this.getTypeName()}'. Field does not exist.`);
    }

    const fieldConfig = (0, _extends3.default)({}, prevFieldConfig, parialFieldConfig);
    this.setField(fieldName, fieldConfig);
    return this;
  }

  reorderFields(names) {
    const orderedFields = {};
    const fields = this.getFields();
    names.forEach(name => {
      if (fields[name]) {
        orderedFields[name] = fields[name];
        delete fields[name];
      }
    });
    this.setFields((0, _extends3.default)({}, orderedFields, fields));
    return this;
  }

  isRequired(fieldName) {
    return this.getFieldType(fieldName) instanceof _graphql.GraphQLNonNull;
  }

  getFieldType(fieldName) {
    const field = this.getField(fieldName);
    if (!field) {
      throw new Error(`Type ${this.getTypeName()} does not have field with name '${fieldName}'`);
    }

    return field.type;
  }

  getFieldTC(fieldName) {
    const fieldType = (0, _graphql.getNamedType)(this.getFieldType(fieldName));
    if (!(fieldType instanceof _graphql.GraphQLInputObjectType)) {
      throw new Error(`Cannot get InputTypeComposer for field '${fieldName}' in type ${this.getTypeName()}. ` + `This field should be InputObjectType, but it has type '${fieldType.constructor.name}'`);
    }
    return this.constructor.schemaComposer.InputTypeComposer.create(fieldType);
  }

  makeRequired(fieldNameOrArray) {
    const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
    const fields = this.getFields();
    fieldNames.forEach(fieldName => {
      if (fields[fieldName] && fields[fieldName].type) {
        if (!(fields[fieldName].type instanceof _graphql.GraphQLNonNull)) {
          fields[fieldName].type = new _graphql.GraphQLNonNull(fields[fieldName].type);
        }
      }
    });
    this.setFields(fields);
    return this;
  }

  makeOptional(fieldNameOrArray) {
    const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
    const fields = this.getFields();
    fieldNames.forEach(fieldName => {
      if (fieldNames.indexOf(fieldName) > -1) {
        if (fields[fieldName] && fields[fieldName].type instanceof _graphql.GraphQLNonNull) {
          fields[fieldName].type = fields[fieldName].type.ofType;
        }
      }
    });
    this.setFields(fields);
    return this;
  }

  clone(newTypeName) {
    if (!newTypeName) {
      throw new Error('You should provide new type name for clone() method');
    }

    const fields = this.getFields();
    const newFields = {};
    Object.keys(fields).forEach(fieldName => {
      newFields[fieldName] = (0, _extends3.default)({}, fields[fieldName]);
    });

    return new this.constructor.schemaComposer.InputTypeComposer(new _graphql.GraphQLInputObjectType({
      name: newTypeName,
      fields: newFields
    }));
  }

  getType() {
    return this.gqType;
  }

  getTypeAsRequired() {
    return new _graphql.GraphQLNonNull(this.gqType);
  }

  getTypeName() {
    return this.gqType.name;
  }

  setTypeName(name) {
    this.gqType.name = name;
    return this;
  }

  getDescription() {
    return this.gqType.description || '';
  }

  setDescription(description) {
    this.gqType.description = description;
    return this;
  }

  get(path) {
    return (0, _typeByPath.typeByPath)(this, path);
  }
}
exports.InputTypeComposer = InputTypeComposer;
// import { deprecate } from './utils/debug';
/*  strict */
/* eslint-disable no-use-before-define */