'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('../graphql');

function identity(value) {
  return value;
} /*  strict */

// copied from https://github.com/taion/graphql-type-json

function parseLiteral(ast) {
  switch (ast.kind) {
    case _graphql.Kind.STRING:
    case _graphql.Kind.BOOLEAN:
      return ast.value;
    case _graphql.Kind.INT:
    case _graphql.Kind.FLOAT:
      return parseFloat(ast.value);
    case _graphql.Kind.OBJECT:
      {
        const value = Object.create(null);
        ast.fields.forEach(field => {
          value[field.name.value] = parseLiteral(field.value);
        });

        return value;
      }
    case _graphql.Kind.LIST:
      return ast.values.map(parseLiteral);
    case _graphql.Kind.NULL:
      return null;
    default:
      return undefined;
  }
}

exports.default = new _graphql.GraphQLScalarType({
  name: 'JSON',
  description: 'The `JSON` scalar type represents JSON values as specified by ' + '[ECMA-404](http://www.ecma-international.org/' + 'publications/files/ECMA-ST/ECMA-404.pdf).',
  serialize: identity,
  parseValue: identity,
  parseLiteral
});