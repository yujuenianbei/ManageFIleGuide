var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { InputTypeComposer } from 'graphql-compose';
import { getTypeName, getOrSetType, desc } from '../../../utils';
import { getGeoPointAsFieldConfigMap } from '../../Commons/FieldNames';
import { getGeoPointFC, getDistanceCalculationModeFC } from '../../Commons/Geo';

export function getGeoDistanceITC(opts = {}) {
  const name = getTypeName('QueryGeoDistance', opts);
  const description = desc(`
    Filters documents that include only hits that exists within
    a specific distance from a geo point.
    Requires the geo_point Mapping.
    [Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-distance-query.html)
  `);

  const subName = getTypeName('QueryGeoDistanceSettings', opts);
  const fields = getGeoPointAsFieldConfigMap(opts, getOrSetType(subName, () => InputTypeComposer.create({
    name: subName,
    fields: {
      top_left: getGeoPointFC(opts),
      bottom_right: getGeoPointFC(opts)
    }
  })));

  if (typeof fields === 'object') {
    return getOrSetType(name, () => InputTypeComposer.create({
      name,
      description,
      fields: _extends({
        distance: {
          type: 'String!',
          description: 'Eg. 12km'
        },
        distance_type: getDistanceCalculationModeFC(opts)
      }, fields, {
        validation_method: 'String'
      })
    }));
  }

  return {
    type: 'JSON',
    description
  };
}