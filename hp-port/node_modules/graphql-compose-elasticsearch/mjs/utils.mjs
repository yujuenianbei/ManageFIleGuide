var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { TypeStorage } from 'graphql-compose';

const typeStorage = new TypeStorage();

export function getTypeName(name, opts) {
  return `${opts && opts.prefix || 'Elastic'}${name}${opts && opts.postfix || ''}`;
}

export function getOrSetType(typeName, typeOrThunk) {
  const type = typeStorage.getOrSet(typeName, typeOrThunk);
  return type;
}

// Remove newline multiline in descriptions
export function desc(str) {
  return str.replace(/\n\s+/gi, ' ').replace(/^\s+/, '');
}

export function reorderKeys(obj, names) {
  const orderedFields = {};
  const fields = _extends({}, obj);
  names.forEach(name => {
    if (fields[name]) {
      orderedFields[name] = fields[name];
      delete fields[name];
    }
  });
  return _extends({}, orderedFields, fields);
}