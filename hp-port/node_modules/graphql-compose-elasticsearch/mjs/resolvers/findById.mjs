var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { Resolver, TypeComposer } from 'graphql-compose';

import ElasticApiParser from '../ElasticApiParser';
import { getFindByIdOutputTC } from '../types/FindByIdOutput';

export default function createFindByIdResolver(fieldMap, sourceTC, opts) {
  if (!fieldMap || !fieldMap._all) {
    throw new Error('First arg for Resolver findById() should be fieldMap of FieldsMapByElasticType type.');
  }

  if (!sourceTC || sourceTC.constructor.name !== 'TypeComposer') {
    throw new Error('Second arg for Resolver findById() should be instance of TypeComposer.');
  }

  const prefix = opts.prefix || 'Es';

  const parser = new ElasticApiParser({
    elasticClient: opts.elasticClient,
    prefix
  });

  const findByIdFC = parser.generateFieldConfig('get', {
    index: opts.elasticIndex,
    type: opts.elasticType
  });

  const argsConfigMap = {
    id: 'String!'
  };

  const type = getFindByIdOutputTC({ prefix, fieldMap, sourceTC });

  return new Resolver({
    type,
    name: 'findById',
    kind: 'query',
    args: argsConfigMap,
    resolve: async rp => {
      const { source, args, context, info } = rp;

      if (!args.id) {
        throw new Error(`Missed 'id' argument!`);
      }

      const res = await findByIdFC.resolve(source, args, context, info);
      const { _index, _type, _id, _version, _source } = res || {};

      return _extends({
        _index,
        _type,
        _id,
        _version
      }, _source);
    }
  });
}