var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { Resolver, TypeComposer, InputTypeComposer } from 'graphql-compose';

import ElasticApiParser from '../ElasticApiParser';
import { getUpdateByIdOutputTC } from '../types/UpdateByIdOutput';
import { getTypeName, getOrSetType, desc } from '../utils';

export default function createUpdateByIdResolver(fieldMap, sourceTC, opts) {
  if (!fieldMap || !fieldMap._all) {
    throw new Error('First arg for Resolver updateById() should be fieldMap of FieldsMapByElasticType type.');
  }

  if (!sourceTC || sourceTC.constructor.name !== 'TypeComposer') {
    throw new Error('Second arg for Resolver updateById() should be instance of TypeComposer.');
  }

  const prefix = opts.prefix || 'Es';

  const parser = new ElasticApiParser({
    elasticClient: opts.elasticClient,
    prefix
  });

  const updateByIdFC = parser.generateFieldConfig('update', {
    index: opts.elasticIndex,
    type: opts.elasticType,
    _source: true
  });

  const argsConfigMap = {
    id: 'String!',
    record: getRecordITC(fieldMap).getTypeNonNull()
  };

  const type = getUpdateByIdOutputTC({ prefix, fieldMap, sourceTC });

  return new Resolver({
    type,
    name: 'updateById',
    kind: 'mutation',
    args: argsConfigMap,
    resolve: async rp => {
      const { source, args, context, info } = rp;

      args.body = {
        doc: _extends({}, args.record)
      };
      delete args.record;

      const res = await updateByIdFC.resolve(source, args, context, info);

      const { _index, _type, _id, _version, result, get } = res || {};
      const { _source } = get || {};

      return _extends({
        _id,
        _index,
        _type,
        _version,
        result
      }, _source);
    }
  });
}

export function getRecordITC(fieldMap) {
  const name = getTypeName('Record', {});
  const description = desc(`The record from Elastic Search`);
  return getOrSetType(name, () => InputTypeComposer.create({
    name,
    description,
    fields: _extends({}, fieldMap._all)
  }));
}