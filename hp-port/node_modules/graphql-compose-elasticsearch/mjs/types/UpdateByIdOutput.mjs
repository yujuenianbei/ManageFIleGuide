var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { TypeComposer } from 'graphql-compose';
import { getTypeName, getOrSetType } from '../utils';


export function getUpdateByIdOutputTC(opts) {
  const name = getTypeName('UpdateByIdOutput', opts);
  const { sourceTC } = opts || {};
  return getOrSetType(name, () => TypeComposer.create({
    name,
    fields: _extends({
      _id: 'String',
      _index: 'String',
      _type: 'String',
      _version: 'Int',
      result: 'String'
    }, sourceTC.getFields())
  }));
}