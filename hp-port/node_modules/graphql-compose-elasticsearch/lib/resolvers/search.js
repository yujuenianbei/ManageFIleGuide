'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = createSearchResolver;
exports.toDottedList = toDottedList;

var _graphqlCompose = require('graphql-compose');

var _ElasticApiParser = require('../ElasticApiParser');

var _ElasticApiParser2 = _interopRequireDefault(_ElasticApiParser);

var _SearchBody = require('../elasticDSL/SearchBody');

var _SearchOutput = require('../types/SearchOutput');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-param-reassign */

function createSearchResolver(fieldMap, sourceTC, opts) {
  var _this = this;

  if (!fieldMap || !fieldMap._all) {
    throw new Error('First arg for Resolver search() should be fieldMap of FieldsMapByElasticType type.');
  }

  if (!sourceTC || sourceTC.constructor.name !== 'TypeComposer') {
    throw new Error('Second arg for Resolver search() should be instance of TypeComposer.');
  }

  var prefix = opts.prefix || 'Es';

  var parser = new _ElasticApiParser2.default({
    elasticClient: opts.elasticClient,
    prefix
  });

  var searchITC = (0, _SearchBody.getSearchBodyITC)({ prefix, fieldMap }).removeField(['size', 'from', '_source', 'explain', 'version']);

  var searchFC = parser.generateFieldConfig('search', {
    index: opts.elasticIndex,
    type: opts.elasticType
  });

  var argsConfigMap = Object.assign({}, searchFC.args, {
    body: {
      type: searchITC.getType()
    }
  });

  delete argsConfigMap.index; // index can not be changed, it hardcoded in searchFC
  delete argsConfigMap.type; // type can not be changed, it hardcoded in searchFC
  delete argsConfigMap.explain; // added automatically if requested _shard, _node, _explanation
  delete argsConfigMap.version; // added automatically if requested _version
  delete argsConfigMap._source; // added automatically due projection
  delete argsConfigMap._sourceExclude; // added automatically due projection
  delete argsConfigMap._sourceInclude; // added automatically due projection
  delete argsConfigMap.trackScores; // added automatically due projection (is _scrore requested with sort)

  delete argsConfigMap.size;
  delete argsConfigMap.from;
  argsConfigMap.limit = 'Int';
  argsConfigMap.skip = 'Int';

  var bodyITC = _graphqlCompose.InputTypeComposer.create(argsConfigMap.body.type);
  argsConfigMap.query = bodyITC.getField('query');
  argsConfigMap.aggs = bodyITC.getField('aggs');
  argsConfigMap.sort = bodyITC.getField('sort');
  argsConfigMap.highlight = bodyITC.getField('highlight');

  var topLevelArgs = ['q', 'query', 'sort', 'limit', 'skip', 'aggs', 'highlight', 'opts'];
  argsConfigMap.opts = _graphqlCompose.InputTypeComposer.create({
    name: `${sourceTC.getTypeName()}Opts`,
    fields: Object.assign({}, argsConfigMap)
  }).removeField(topLevelArgs);
  Object.keys(argsConfigMap).forEach(function (argKey) {
    if (topLevelArgs.indexOf(argKey) === -1) {
      delete argsConfigMap[argKey];
    }
  });

  var type = (0, _SearchOutput.getSearchOutputTC)({ prefix, fieldMap, sourceTC });
  var hitsType = void 0;
  try {
    hitsType = type.get('hits.hits');
  } catch (e) {
    hitsType = 'JSON';
  }
  type.addFields({
    count: 'Int',
    max_score: 'Float',
    hits: hitsType ? [hitsType] : 'JSON'
  }).reorderFields(['hits', 'count', 'aggregations', 'max_score', 'took', 'timed_out', '_shards']);

  return new _graphqlCompose.Resolver({
    type,
    name: 'search',
    kind: 'query',
    args: argsConfigMap,
    resolve: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(rp) {
        var args, projection, _projection$hits, hits, res;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                args = rp.args || {};
                projection = rp.projection || {};

                if (!args.body) args.body = {};

                if ({}.hasOwnProperty.call(args, 'limit')) {
                  args.size = args.limit;
                  delete args.limit;
                }

                if ({}.hasOwnProperty.call(args, 'skip')) {
                  args.from = args.skip;
                  delete args.skip;
                }

                _projection$hits = projection.hits, hits = _projection$hits === undefined ? {} : _projection$hits;


                if (hits && typeof hits === 'object') {
                  // Turn on explain if in projection requested this fields:
                  if (hits._shard || hits._node || hits._explanation) {
                    args.body.explain = true;
                  }

                  if (hits._version) {
                    args.body.version = true;
                  }

                  if (!hits._source) {
                    args.body._source = false;
                  } else {
                    args.body._source = toDottedList(hits._source);
                  }

                  if (hits._score) {
                    args.body.track_scores = true;
                  }
                }

                if (args.query) {
                  args.body.query = args.query;
                  delete args.query;
                }

                if (args.aggs) {
                  args.body.aggs = args.aggs;
                  delete args.aggs;
                }

                if (args.highlight) {
                  args.body.highlight = args.highlight;
                  delete args.highlight;
                }

                if (args.sort) {
                  args.body.sort = args.sort;
                  delete args.sort;
                }

                if (args.opts) {
                  args = (0, _extends3.default)({}, args.opts, args, {
                    body: (0, _extends3.default)({}, args.opts.body, args.body)
                  });
                  delete args.opts;
                }

                if (args.body) {
                  args.body = (0, _SearchBody.prepareBodyInResolve)(args.body, fieldMap);
                }

                _context.next = 15;
                return searchFC.resolve(rp.source, args, rp.context, rp.info);

              case 15:
                res = _context.sent;


                res.count = res.hits.total;
                res.max_score = res.hits.max_score;
                res.hits = res.hits.hits;

                return _context.abrupt('return', res);

              case 20:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function resolve(_x) {
        return _ref.apply(this, arguments);
      }

      return resolve;
    }()
  }).reorderArgs(['q', 'query', 'sort', 'limit', 'skip', 'aggs']);
}

function toDottedList(projection, prev) {
  var result = [];
  Object.keys(projection).forEach(function (k) {
    if ((0, _graphqlCompose.isObject)(projection[k])) {
      var tmp = toDottedList(projection[k], prev ? [].concat((0, _toConsumableArray3.default)(prev), [k]) : [k]);
      if (Array.isArray(tmp)) {
        result = result.concat(tmp);
        return;
      }
    }

    if (prev) {
      result.push([].concat((0, _toConsumableArray3.default)(prev), [k]).join('.'));
    } else {
      result.push(k);
    }
  });
  return result.length > 0 ? result : true;
}