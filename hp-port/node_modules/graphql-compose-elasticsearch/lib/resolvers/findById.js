'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = createFindByIdResolver;

var _graphqlCompose = require('graphql-compose');

var _ElasticApiParser = require('../ElasticApiParser');

var _ElasticApiParser2 = _interopRequireDefault(_ElasticApiParser);

var _FindByIdOutput = require('../types/FindByIdOutput');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createFindByIdResolver(fieldMap, sourceTC, opts) {
  var _this = this;

  if (!fieldMap || !fieldMap._all) {
    throw new Error('First arg for Resolver findById() should be fieldMap of FieldsMapByElasticType type.');
  }

  if (!sourceTC || sourceTC.constructor.name !== 'TypeComposer') {
    throw new Error('Second arg for Resolver findById() should be instance of TypeComposer.');
  }

  var prefix = opts.prefix || 'Es';

  var parser = new _ElasticApiParser2.default({
    elasticClient: opts.elasticClient,
    prefix
  });

  var findByIdFC = parser.generateFieldConfig('get', {
    index: opts.elasticIndex,
    type: opts.elasticType
  });

  var argsConfigMap = {
    id: 'String!'
  };

  var type = (0, _FindByIdOutput.getFindByIdOutputTC)({ prefix, fieldMap, sourceTC });

  return new _graphqlCompose.Resolver({
    type,
    name: 'findById',
    kind: 'query',
    args: argsConfigMap,
    resolve: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(rp) {
        var source, args, context, info, res, _ref2, _index, _type, _id, _version, _source;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                source = rp.source, args = rp.args, context = rp.context, info = rp.info;

                if (args.id) {
                  _context.next = 3;
                  break;
                }

                throw new Error(`Missed 'id' argument!`);

              case 3:
                _context.next = 5;
                return findByIdFC.resolve(source, args, context, info);

              case 5:
                res = _context.sent;
                _ref2 = res || {}, _index = _ref2._index, _type = _ref2._type, _id = _ref2._id, _version = _ref2._version, _source = _ref2._source;
                return _context.abrupt('return', (0, _extends3.default)({
                  _index,
                  _type,
                  _id,
                  _version
                }, _source));

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function resolve(_x) {
        return _ref.apply(this, arguments);
      }

      return resolve;
    }()
  });
}