'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.elasticApiFieldConfig = elasticApiFieldConfig;

var _graphql = require('graphql-compose/lib/graphql');

var _elasticsearch = require('elasticsearch');

var _elasticsearch2 = _interopRequireDefault(_elasticsearch);

var _ElasticApiParser = require('./ElasticApiParser');

var _ElasticApiParser2 = _interopRequireDefault(_ElasticApiParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_ELASTIC_API_VERSION = '_default';
/* eslint-disable no-param-reassign */

function elasticApiFieldConfig(esClientOrOpts) {
  if (!esClientOrOpts || typeof esClientOrOpts !== 'object') {
    throw new Error('You should provide ElasticClient instance or ElasticClientConfig in first argument.');
  }

  if (isElasticClient(esClientOrOpts)) {
    return instanceElasticClient(esClientOrOpts);
  } else {
    return contextElasticClient(esClientOrOpts);
  }
}

function instanceElasticClient(elasticClient) {
  var apiVersion = elasticClient.transport._config.apiVersion || DEFAULT_ELASTIC_API_VERSION;
  var prefix = `ElasticAPI${apiVersion.replace('.', '')}`;

  var apiParser = new _ElasticApiParser2.default({
    elasticClient,
    prefix
  });

  return {
    description: `Elastic API v${apiVersion}`,
    type: new _graphql.GraphQLObjectType({
      name: prefix,
      fields: apiParser.generateFieldMap()
    }),
    resolve: function resolve() {
      return {};
    }
  };
}

function contextElasticClient(elasticConfig) {
  if (!elasticConfig.apiVersion) {
    elasticConfig.apiVersion = DEFAULT_ELASTIC_API_VERSION;
  }
  var apiVersion = elasticConfig.apiVersion;

  var prefix = `ElasticAPI${apiVersion.replace('.', '')}`;

  var apiParser = new _ElasticApiParser2.default({
    apiVersion,
    prefix
  });

  return {
    description: `Elastic API v${apiVersion}`,
    type: new _graphql.GraphQLObjectType({
      name: prefix,
      fields: apiParser.generateFieldMap()
    }),
    args: {
      host: {
        type: _graphql.GraphQLString,
        defaultValue: elasticConfig.host || 'http://user:pass@localhost:9200'
      }
    },
    resolve: function resolve(src, args, context) {
      if (typeof context === 'object') {
        var opts = args.host ? (0, _extends3.default)({}, elasticConfig, {
          host: args.host
        }) : elasticConfig;
        context.elasticClient = new _elasticsearch2.default.Client(opts);
      }
      return {};
    }
  };
}

function isElasticClient(obj) {
  if (obj instanceof _elasticsearch2.default.Client) {
    return true;
  }

  if (obj && obj.transport && obj.transport._config && obj.transport._config.__reused) {
    return true;
  }

  return false;
}