'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElasticGeoPointType = undefined;
exports.getGeoPointFC = getGeoPointFC;
exports.getDistanceUnitFC = getDistanceUnitFC;
exports.getDistanceCalculationModeFC = getDistanceCalculationModeFC;

var _graphqlCompose = require('graphql-compose');

var _graphql = require('graphql-compose/lib/graphql');

var _utils = require('../../utils');

var ElasticGeoPointType = exports.ElasticGeoPointType = new _graphql.GraphQLScalarType({
  name: 'ElasticGeoPointType',
  description: (0, _utils.desc)(`
    Elastic Search GeoPoint Type.
    Object format: { "lat" : 52.3760, "lon" : 4.894 }.
    String format (lat, lon): "52.3760, 4.894".
    Array GeoJson format (lat, lon): [4.894, 52.3760]
  `),
  serialize: function serialize(v) {
    return v;
  },
  parseValue: function parseValue(v) {
    return v;
  },
  parseLiteral(ast) {
    switch (ast.kind) {
      case _graphql.Kind.STRING:
        return ast.value;
      case _graphql.Kind.OBJECT:
        {
          var lat = void 0;
          var lon = void 0;
          ast.fields.forEach(function (field) {
            if (field.name.value === 'lat') {
              lat = parseFloat(field.value);
            }
            if (field.name.value === 'lon') {
              lon = parseFloat(field.value);
            }
          });
          return { lat, lon };
        }
      case _graphql.Kind.LIST:
        if (ast.values.length === 2) {
          return [parseFloat(ast.values[0].value || 0), parseFloat(ast.values[1].value || 0)];
        }
        return null;
      default:
        return null;
    }
  }
});
/* eslint-disable no-unused-vars */

function getGeoPointFC() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return ElasticGeoPointType;
}

function getDistanceUnitFC() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return {
    type: 'String',
    description: (0, _utils.desc)(`
      By default, the distance unit is m (metres) but it can also accept:
      mi (miles), in (inches), yd (yards), km (kilometers), cm (centimeters),
      mm (millimeters).
    `)
  };
}

function getDistanceCalculationModeFC() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return {
    type: 'String',
    description: (0, _utils.desc)(`
      \`sloppy_arc\` (the default)
      \`arc\` (most accurate) for very large areas like cross continent search.
      \`plane\` (fastest) for smaller geographical areas like cities or even countries.
    `)
  };
}