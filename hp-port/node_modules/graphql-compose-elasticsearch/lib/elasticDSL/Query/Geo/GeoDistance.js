'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.getGeoDistanceITC = getGeoDistanceITC;

var _graphqlCompose = require('graphql-compose');

var _utils = require('../../../utils');

var _FieldNames = require('../../Commons/FieldNames');

var _Geo = require('../../Commons/Geo');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getGeoDistanceITC() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var name = (0, _utils.getTypeName)('QueryGeoDistance', opts);
  var description = (0, _utils.desc)(`
    Filters documents that include only hits that exists within
    a specific distance from a geo point.
    Requires the geo_point Mapping.
    [Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-distance-query.html)
  `);

  var subName = (0, _utils.getTypeName)('QueryGeoDistanceSettings', opts);
  var fields = (0, _FieldNames.getGeoPointAsFieldConfigMap)(opts, (0, _utils.getOrSetType)(subName, function () {
    return _graphqlCompose.InputTypeComposer.create({
      name: subName,
      fields: {
        top_left: (0, _Geo.getGeoPointFC)(opts),
        bottom_right: (0, _Geo.getGeoPointFC)(opts)
      }
    });
  }));

  if (typeof fields === 'object') {
    return (0, _utils.getOrSetType)(name, function () {
      return _graphqlCompose.InputTypeComposer.create({
        name,
        description,
        fields: (0, _extends3.default)({
          distance: {
            type: 'String!',
            description: 'Eg. 12km'
          },
          distance_type: (0, _Geo.getDistanceCalculationModeFC)(opts)
        }, fields, {
          validation_method: 'String'
        })
      });
    });
  }

  return {
    type: 'JSON',
    description
  };
}