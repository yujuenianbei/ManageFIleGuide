'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAggRulesITC = getAggRulesITC;

var _graphqlCompose = require('graphql-compose');

var _utils = require('../../utils');

var _AggBlock = require('./AggBlock');

var _Avg = require('./Metrics/Avg');

var _Cardinality = require('./Metrics/Cardinality');

var _ExtendedStats = require('./Metrics/ExtendedStats');

var _GeoBounds = require('./Metrics/GeoBounds');

var _GeoCentroid = require('./Metrics/GeoCentroid');

var _Max = require('./Metrics/Max');

var _Min = require('./Metrics/Min');

var _PercentileRanks = require('./Metrics/PercentileRanks');

var _Percentiles = require('./Metrics/Percentiles');

var _ScriptedMetric = require('./Metrics/ScriptedMetric');

var _Stats = require('./Metrics/Stats');

var _Sum = require('./Metrics/Sum');

var _TopHits = require('./Metrics/TopHits');

var _ValueCount = require('./Metrics/ValueCount');

var _Children = require('./Bucket/Children');

var _DateHistogram = require('./Bucket/DateHistogram');

var _DateRange = require('./Bucket/DateRange');

var _DiversifiedSampler = require('./Bucket/DiversifiedSampler');

var _Filter = require('./Bucket/Filter');

var _Filters = require('./Bucket/Filters');

var _GeoDistance = require('./Bucket/GeoDistance');

var _GeohashGrid = require('./Bucket/GeohashGrid');

var _Global = require('./Bucket/Global');

var _Histogram = require('./Bucket/Histogram');

var _IpRange = require('./Bucket/IpRange');

var _Missing = require('./Bucket/Missing');

var _Nested = require('./Bucket/Nested');

var _Range = require('./Bucket/Range');

var _ReverseNested = require('./Bucket/ReverseNested');

var _Sampler = require('./Bucket/Sampler');

var _SignificantTerms = require('./Bucket/SignificantTerms');

var _Terms = require('./Bucket/Terms');

var _AvgBucket = require('./Pipeline/AvgBucket');

var _BucketScript = require('./Pipeline/BucketScript');

var _BucketSelector = require('./Pipeline/BucketSelector');

var _CumulativeSum = require('./Pipeline/CumulativeSum');

var _Derivative = require('./Pipeline/Derivative');

var _ExtendedStatsBucket = require('./Pipeline/ExtendedStatsBucket');

var _MaxBucket = require('./Pipeline/MaxBucket');

var _MinBucket = require('./Pipeline/MinBucket');

var _MovingAverage = require('./Pipeline/MovingAverage');

var _PercentilesBucket = require('./Pipeline/PercentilesBucket');

var _SerialDifferencing = require('./Pipeline/SerialDifferencing');

var _StatsBucket = require('./Pipeline/StatsBucket');

var _SumBucket = require('./Pipeline/SumBucket');

function getAggRulesITC() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var name = (0, _utils.getTypeName)('AggRules', opts);
  var description = (0, _utils.desc)(`
    The aggregations framework helps provide aggregated data based on
    a search query. It is based on simple building blocks called aggregations,
    that can be composed in order to build complex summaries of the data.
    [Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html)
  `);

  return (0, _utils.getOrSetType)(name, function () {
    return _graphqlCompose.InputTypeComposer.create({
      name,
      description,
      fields: {
        avg: function avg() {
          return (0, _Avg.getAvgITC)(opts);
        },
        cardinality: function cardinality() {
          return (0, _Cardinality.getCardinalityITC)(opts);
        },
        extended_stats: function extended_stats() {
          return (0, _ExtendedStats.getExtendedStatsITC)(opts);
        },
        geo_bounds: function geo_bounds() {
          return (0, _GeoBounds.getGeoBoundsITC)(opts);
        },
        geo_centroid: function geo_centroid() {
          return (0, _GeoCentroid.getGeoCentroidITC)(opts);
        },
        max: function max() {
          return (0, _Max.getMaxITC)(opts);
        },
        min: function min() {
          return (0, _Min.getMinITC)(opts);
        },
        percentile_ranks: function percentile_ranks() {
          return (0, _PercentileRanks.getPercentileRanksITC)(opts);
        },
        percentiles: function percentiles() {
          return (0, _Percentiles.getPercentilesITC)(opts);
        },
        scripted_metric: function scripted_metric() {
          return (0, _ScriptedMetric.getScriptedMetricITC)(opts);
        },
        stats: function stats() {
          return (0, _Stats.getStatsITC)(opts);
        },
        sum: function sum() {
          return (0, _Sum.getSumITC)(opts);
        },
        top_hits: function top_hits() {
          return (0, _TopHits.getTopHitsITC)(opts);
        },
        value_count: function value_count() {
          return (0, _ValueCount.getValueCountITC)(opts);
        },

        children: function children() {
          return (0, _Children.getChildrenITC)(opts);
        },
        date_histogram: function date_histogram() {
          return (0, _DateHistogram.getDateHistogramITC)(opts);
        },
        date_range: function date_range() {
          return (0, _DateRange.getAggsDateRangeITC)(opts);
        },
        diversified_sampler: function diversified_sampler() {
          return (0, _DiversifiedSampler.getDiversifiedSamplerITC)(opts);
        },
        filter: function filter() {
          return (0, _Filter.getFilterITC)(opts);
        },
        filters: function filters() {
          return (0, _Filters.getFiltersITC)(opts);
        },
        geo_distance: function geo_distance() {
          return (0, _GeoDistance.getGeoDistanceITC)(opts);
        },
        geohash_grid: function geohash_grid() {
          return (0, _GeohashGrid.getGeohashGridITC)(opts);
        },
        global: function global() {
          return (0, _Global.getGlobalITC)(opts);
        },
        histogram: function histogram() {
          return (0, _Histogram.getHistogramITC)(opts);
        },
        ip_range: function ip_range() {
          return (0, _IpRange.getIpRangeITC)(opts);
        },
        missing: function missing() {
          return (0, _Missing.getMissingITC)(opts);
        },
        nested: function nested() {
          return (0, _Nested.getNestedITC)(opts);
        },
        range: function range() {
          return (0, _Range.getRangeITC)(opts);
        },
        reverse_nested: function reverse_nested() {
          return (0, _ReverseNested.getReverseNestedITC)(opts);
        },
        sampler: function sampler() {
          return (0, _Sampler.getSamplerITC)(opts);
        },
        significant_terms: function significant_terms() {
          return (0, _SignificantTerms.getSignificantTermsITC)(opts);
        },
        terms: function terms() {
          return (0, _Terms.getTermsITC)(opts);
        },

        avg_bucket: function avg_bucket() {
          return (0, _AvgBucket.getAvgBucketITC)(opts);
        },
        bucket_script: function bucket_script() {
          return (0, _BucketScript.getBucketScriptITC)(opts);
        },
        bucket_selector: function bucket_selector() {
          return (0, _BucketSelector.getBucketSelectorITC)(opts);
        },
        cumulative_sum: function cumulative_sum() {
          return (0, _CumulativeSum.getCumulativeSumITC)(opts);
        },
        derivative: function derivative() {
          return (0, _Derivative.getDerivativeITC)(opts);
        },
        extended_stats_bucket: function extended_stats_bucket() {
          return (0, _ExtendedStatsBucket.getExtendedStatsBucketITC)(opts);
        },
        max_bucket: function max_bucket() {
          return (0, _MaxBucket.getMaxBucketITC)(opts);
        },
        min_bucket: function min_bucket() {
          return (0, _MinBucket.getMinBucketITC)(opts);
        },
        moving_average: function moving_average() {
          return (0, _MovingAverage.getMovingAverageITC)(opts);
        },
        percentiles_bucket: function percentiles_bucket() {
          return (0, _PercentilesBucket.getPercentilesBucketITC)(opts);
        },
        serial_differencing: function serial_differencing() {
          return (0, _SerialDifferencing.getSerialDifferencingITC)(opts);
        },
        stats_bucket: function stats_bucket() {
          return (0, _StatsBucket.getStatsBucketITC)(opts);
        },
        sum_bucket: function sum_bucket() {
          return (0, _SumBucket.getSumBucketITC)(opts);
        },

        aggs: {
          type: function type() {
            return [(0, _AggBlock.getAggBlockITC)(opts)];
          },
          description: 'Aggregation block'
        }
      }
    });
  });
}