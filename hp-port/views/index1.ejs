<!DOCTYPE html>
<html>

<head>
  <title><%= title %></title>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/stylesheets/confirm.css">
</head>

<body>
  <div class="container white">
    <div class="info">
      <div class="header">
        <img src="https://media.hpstore.cn/static/version1560379864/frontend/HPOLS/default/zh_Hans_CN/images/logo.svg">
        <p>惠普中国</p>
      </div>
      <div class="line"></div>
      <div class="message">
        <p>即将登录你的账号，请确认是本人操作</p>
        <ul>
          <li>获取你的头像</li>
          <li>获取你的昵称</li>
          <li>使用你的账号登录应用</li>
        </ul>
        <a id="confirmlBtn" class="confirm" href="#">确认登录</a>
        <a id="cancelBtn" class="cancel" href="#">取消登录</a>
      </div>
      <div class="loginInput">
        <div class="userInput">
          <label class="title">用户名</label><input class="inputs username" type="text">
        </div>
        <div class="userInput">
          <label class="title">密码</label><input class="inputs password" type="password">
        </div>
        <a id="confirmUserBtn" class="confirm" href="#">确认登录</a>
        <a id="cancelUserBtn" class="cancel" href="#">取消登录</a>
      </div>
    </div>
  </div>

  <script src="/js/jquery-3.3.1.min.js"></script>
  <script>
    var uid = "<%= uid %>";
    var http = "<%= http %>";
    var uuid = '';
    var postState = function () {
      console.log(http)
      $.post("/scanner", { uid: uid }, function (result) {
        if (uuid !== '' && state === 1) {
          $(".loginInput").hide();
          $(".message").show();
        } else {
          $(".loginInput").show();
          $(".message").hide();
        }
      })
    }
    $("#cancelBtn").click(function () {
      $.post("/confirm", { uid: uid, operation: "cancel" }, function (result) {
        if (WeixinJSBridge) {
          WeixinJSBridge.call('closeWindow');
        } else {
          window.opener = null;
          window.open('', '_self');
          window.close();
        }
      })
    })

    $("#confirmlBtn").click(function () {
      $.post("/confirm", { uuid: uuid, uid: uid, operation: "login" }, function (result) {
        alert('登陆成功')
        if (result.state === 3) {
          setTimeout(function () {
            if (WeixinJSBridge) {
              WeixinJSBridge.call('closeWindow');
            } else {
              window.opener = null;
              window.open('', '_self');
              window.close();
            }
          }, 1000)
        }
      })
    })

    $("#cancelUserBtn").click(function () {
      $.post("/confirm", { uid: uid, operation: "cancel" }, function (result) {
        if (WeixinJSBridge) {
          WeixinJSBridge.call('closeWindow');
        } else {
          window.opener = null;
          window.open('', '_self');
          window.close();
        }
      })
    })

    $("#confirmUserBtn").click(function () {
      var userName = $(".username").val();
      var password = $(".password").val();
      $.ajax({
        method: "POST",
        url: http,
        contentType: "application/json",
        headers: {

        },
        data: JSON.stringify({
          query: `mutation login($name: String, $password: String){
                    login(name: $name, password: $password){
                      id
                      name,
                      state,
                      token,
                      uuid
                    } 
                  }`,
          variables: {
            "name": userName,
            "password": password
          }
        }),
        success: function (data) {
          uuid = data.data.login[0].uuid;
          var state = data.data.login[0].state;
          console.log(uuid)
          if (uuid !== '' && state === "1") {
            $(".loginInput").hide();
            $(".message").show();
          } else {
            $(".loginInput").show();
            $(".message").hide();
          }
        },
      })
    })
    postState()
  </script>
</body>

</html>


  <!-- <style>
    /* Always set the map height explicitly to define the size of the div
* element that contains the map. */
    #map {
      height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
  </style>
  <style>
    #locationField,
    #controls {
      position: relative;
      width: 480px;
    }

    #autocomplete {
      position: absolute;
      top: 0px;
      left: 0px;
      width: 99%;
    }

    .label {
      text-align: right;
      font-weight: bold;
      width: 100px;
      color: #303030;
      font-family: "Roboto";
    }

    #address {
      border: 1px solid #000090;
      background-color: #f0f9ff;
      width: 480px;
      padding-right: 2px;
    }

    #address td {
      font-size: 10pt;
    }

    .field {
      width: 99%;
    }

    .slimField {
      width: 80px;
    }

    .wideField {
      width: 200px;
    }

    #locationField {
      height: 20px;
      margin-bottom: 2px;
    }
  </style>
  <div id="locationField">
    <input id="autocomplete" placeholder="Enter your address" onFocus="geolocate()" type="text" />
  </div>
  <table id="address">
    <tr>
      <td class="label">Street address</td>
      <td class="slimField"><input class="field" id="street_number" disabled="true" /></td>
      <td class="wideField" colspan="2"><input class="field" id="route" disabled="true" /></td>
    </tr>
    <tr>
      <td class="label">City</td>
      <td class="wideField" colspan="3"><input class="field" id="locality" disabled="true" /></td>
    </tr>
    <tr>
      <td class="label">State</td>
      <td class="slimField"><input class="field" id="administrative_area_level_1" disabled="true" /></td>
      <td class="label">Zip code</td>
      <td class="wideField"><input class="field" id="postal_code" disabled="true" /></td>
    </tr>
    <tr>
      <td class="label">Country</td>
      <td class="wideField" colspan="3"><input class="field" id="country" disabled="true" /></td>
    </tr>
  </table>

  <script>
    setTimeout(function () {
      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };
    }, 5000);
    function initAutocomplete() {
      // Create the autocomplete object, restricting the search predictions to
      // geographical location types.
      autocomplete = new google.maps.places.Autocomplete(
        document.getElementById("autocomplete"), { types: ['geocode'] });

      // Avoid paying for data that you don't need by restricting the set of
      // place fields that are returned to just the address components.
      autocomplete.setFields(['address_component']);

      // When the user selects an address from the drop-down, populate the
      // address fields in the form.
      autocomplete.addListener('place_changed', fillInAddress);
    }
    function fillInAddress() {
      // Get the place details from the autocomplete object.
      var place = autocomplete.getPlace();

      for (var component in componentForm) {
        document.getElementById(component).value = '';
        document.getElementById(component).disabled = false;
      }

      // Get each component of the address from the place details,
      // and then fill-in the corresponding field on the form.
      for (var i = 0; i < place.address_components.length; i++) {
        var addressType = place.address_components[i].types[0];
        if (componentForm[addressType]) {
          var val = place.address_components[i][componentForm[addressType]];
          document.getElementById(addressType).value = val;
        }
      }
    }
    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
          var geolocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          var circle = new google.maps.Circle(
            { center: geolocation, radius: position.coords.accuracy });
          autocomplete.setBounds(circle.getBounds());
        });
      }
    }
  </script>
    <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDeqA4dna7Zo0DGCrWPI7mrBtlSdJr1UJc&libraries=places&callback=initAutocomplete"
    async defer></script> -->



    <!-- <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
          height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
          height: 100%;
          margin: 0;
          padding: 0;
        }
      </style>
      <div id="map"></div>
      <script>
        var map;
        function initMap() {
          map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: -34.397, lng: 150.644},
            zoom: 8
          });
        }
      </script>
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDeqA4dna7Zo0DGCrWPI7mrBtlSdJr1UJc&callback=initMap"
      async defer></script> -->